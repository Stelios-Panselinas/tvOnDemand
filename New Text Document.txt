import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.CallableStatement;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Στελιος Πανσεληνας
 */

public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        customerLayeredPane = new javax.swing.JLayeredPane();
        profileScrollPane = new javax.swing.JScrollPane();
        profileTable = new javax.swing.JTable();
        editProfileLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        registLabel = new javax.swing.JLabel();
        registComboBox = new javax.swing.JComboBox<>();
        saveBut2 = new javax.swing.JButton();
        myProfileBut = new javax.swing.JButton();
        chgRegisBut = new javax.swing.JButton();
        availableContBut = new javax.swing.JButton();
        yourRentalsLabel = new javax.swing.JLabel();
        avContentLabel = new javax.swing.JLabel();
        myRentalsBut = new javax.swing.JButton();
        avFilmScrollPane = new javax.swing.JScrollPane();
        avFilmTable = new javax.swing.JTable();
        avSeriesScrollPane = new javax.swing.JScrollPane();
        avSeriesTable = new javax.swing.JTable();
        rentSeriesBut = new javax.swing.JButton();
        movieRentBut = new javax.swing.JButton();
        filmRentScrollPane = new javax.swing.JScrollPane();
        filmTable = new javax.swing.JTable();
        seriesRentScrollPane = new javax.swing.JScrollPane();
        seriesTable = new javax.swing.JTable();
        adminLayeredPane = new javax.swing.JLayeredPane();
        newAccBut = new javax.swing.JButton();
        dltAccBut = new javax.swing.JButton();
        incomesBut = new javax.swing.JButton();
        addEmployeeScrollPane = new javax.swing.JScrollPane();
        addEmployeeTable = new javax.swing.JTable();
        addEmployeeBut = new javax.swing.JButton();
        addCustomerScrollPane = new javax.swing.JScrollPane();
        addCustomerTable = new javax.swing.JTable();
        addCustomerBut = new javax.swing.JButton();
        noContentLabel2 = new javax.swing.JLabel();
        deleteCustomerScrollPane = new javax.swing.JScrollPane();
        deleteCustomerTable = new javax.swing.JTable();
        deleteEmployeeScrollPane = new javax.swing.JScrollPane();
        deleteEmployeeTable = new javax.swing.JTable();
        deleteCustomerBut = new javax.swing.JButton();
        deleteEmployeeBut = new javax.swing.JButton();
        makeAdministratorBut = new javax.swing.JButton();
        deleteAdministratorScrollPane = new javax.swing.JScrollPane();
        deleteAdministratorTable = new javax.swing.JTable();
        makeEmployeeBut = new javax.swing.JButton();
        noAdmin = new javax.swing.JLabel();
        incomeScrollPane = new javax.swing.JScrollPane();
        incomeTable = new javax.swing.JTable();
        incomeLabel = new javax.swing.JLabel();
        seriesIncomeScrollPane = new javax.swing.JScrollPane();
        seriesIncomeTable = new javax.swing.JTable();
        employeeLayeredPane = new javax.swing.JLayeredPane();
        custScrollPane = new javax.swing.JScrollPane();
        custTable = new javax.swing.JTable();
        custInfoLabel = new javax.swing.JLabel();
        updateActorsBut = new javax.swing.JButton();
        updateMoviesBut = new javax.swing.JButton();
        updateSeriesBut = new javax.swing.JButton();
        updateLanguagesBut = new javax.swing.JButton();
        updateCategoriesBut = new javax.swing.JButton();
        updateAdressBut = new javax.swing.JButton();
        updateCityBut = new javax.swing.JButton();
        updateCountryBut = new javax.swing.JButton();
        updateAvailableBut = new javax.swing.JButton();
        updateActorScrollPane = new javax.swing.JScrollPane();
        updateActorTable = new javax.swing.JTable();
        addActor = new javax.swing.JButton();
        noContentLabel = new javax.swing.JLabel();
        addSeriesScrollPane = new javax.swing.JScrollPane();
        addSerieTable = new javax.swing.JTable();
        addSerieBut = new javax.swing.JButton();
        addFilmScrollPane = new javax.swing.JScrollPane();
        addMovieTable = new javax.swing.JTable();
        addFilmBut = new javax.swing.JButton();
        addLanguageScrollPane = new javax.swing.JScrollPane();
        addLanguageTable = new javax.swing.JTable();
        addLanguageBut = new javax.swing.JButton();
        addCategoryScrollPane = new javax.swing.JScrollPane();
        addCategoryTable = new javax.swing.JTable();
        addCategoryBut = new javax.swing.JButton();
        addAddressScrollPane = new javax.swing.JScrollPane();
        addAddressTable = new javax.swing.JTable();
        addAddressBut = new javax.swing.JButton();
        addCityScrollPane = new javax.swing.JScrollPane();
        addCityTable = new javax.swing.JTable();
        addCityBut = new javax.swing.JButton();
        addCountryScrollPane = new javax.swing.JScrollPane();
        addCountryTable = new javax.swing.JTable();
        addCountryBut = new javax.swing.JButton();
        updateFilmInvScrollPane = new javax.swing.JScrollPane();
        updtAvFilmTable = new javax.swing.JTable();
        updtFilmInventory = new javax.swing.JButton();
        updtAvSeriesScrollPane = new javax.swing.JScrollPane();
        updtAvSeriesTable = new javax.swing.JTable();
        updtAvSeriesBut = new javax.swing.JButton();
        seeCustBut = new javax.swing.JButton();
        updateDBBut = new javax.swing.JButton();
        topBut = new javax.swing.JButton();
        rentsBut = new javax.swing.JButton();
        rentSeriesScrollPane = new javax.swing.JScrollPane();
        seriesRent = new javax.swing.JTable();
        rentFilmScrollPane = new javax.swing.JScrollPane();
        filmRents = new javax.swing.JTable();
        rentsLabel = new javax.swing.JLabel();
        topFilmScrollPane = new javax.swing.JScrollPane();
        topFilmsTable = new javax.swing.JTable();
        topSeriesScrollPane = new javax.swing.JScrollPane();
        topSeriesTable = new javax.swing.JTable();
        topLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1133, 978));

        customerLayeredPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        profileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Email", "Address", "District", "Postal Code", "Phone", "City", "Country"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        profileTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                profileTableInputMethodTextChanged(evt);
            }
        });
        profileScrollPane.setViewportView(profileTable);

        editProfileLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        editProfileLabel.setText("Edit your profile");

        saveButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        registLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registLabel.setText("Your registration is only for:");

        registComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Movies for 0.4$/movie", "Series for 0.2$/episode", "Movies & Series for 0.3$/movie & 0.1$/episode" }));

        saveBut2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        saveBut2.setText("Save");
        saveBut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBut2ActionPerformed(evt);
            }
        });

        myProfileBut.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        myProfileBut.setText("My Profile");
        myProfileBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileButActionPerformed(evt);
            }
        });

        chgRegisBut.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chgRegisBut.setText("Change Registration");
        chgRegisBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chgRegisButActionPerformed(evt);
            }
        });

        availableContBut.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        availableContBut.setText("Available Content");
        availableContBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableContButActionPerformed(evt);
            }
        });

        yourRentalsLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        yourRentalsLabel.setText("Your Rentals");

        avContentLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        avContentLabel.setText("Available Content");

        myRentalsBut.setText("My Rentals");
        myRentalsBut.setPreferredSize(new java.awt.Dimension(96, 26));
        myRentalsBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myRentalsButActionPerformed(evt);
            }
        });

        avFilmScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        avFilmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Film ID", "Title", "Release Date", "Rating", "Special Features", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        avFilmScrollPane.setViewportView(avFilmTable);

        avSeriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Series ID", "Title", "Release Date", "Rating", "Special Features", "Description", "Seasons"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        avSeriesScrollPane.setViewportView(avSeriesTable);

        rentSeriesBut.setText("Rent Series");
        rentSeriesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentSeriesButActionPerformed(evt);
            }
        });

        movieRentBut.setText("Rent Movie");
        movieRentBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieRentButActionPerformed(evt);
            }
        });

        filmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Film ID", "Inventory ID", "Title", "Rental Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        filmRentScrollPane.setViewportView(filmTable);

        seriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Series ID", "Inventory ID", "Title", "Rental Date"
            }
        ));
        seriesRentScrollPane.setViewportView(seriesTable);

        customerLayeredPane.setLayer(profileScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(editProfileLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(saveButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(registLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(registComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(saveBut2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(myProfileBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(chgRegisBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(availableContBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(yourRentalsLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(avContentLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(myRentalsBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(avFilmScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(avSeriesScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(rentSeriesBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(movieRentBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(filmRentScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        customerLayeredPane.setLayer(seriesRentScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout customerLayeredPaneLayout = new javax.swing.GroupLayout(customerLayeredPane);
        customerLayeredPane.setLayout(customerLayeredPaneLayout);
        customerLayeredPaneLayout.setHorizontalGroup(
            customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                        .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(registLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, customerLayeredPaneLayout.createSequentialGroup()
                                        .addComponent(registComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(saveBut2))
                                    .addComponent(avContentLabel, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(avFilmScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(movieRentBut))
                            .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(seriesRentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filmRentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(myProfileBut, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chgRegisBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(myRentalsBut, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availableContBut, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                        .addComponent(avSeriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rentSeriesBut, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                        .addGap(464, 464, 464)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(yourRentalsLabel))
                    .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editProfileLabel)
                            .addComponent(profileScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1072, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(853, Short.MAX_VALUE))
        );
        customerLayeredPaneLayout.setVerticalGroup(
            customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editProfileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profileScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(yourRentalsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filmRentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(customerLayeredPaneLayout.createSequentialGroup()
                        .addComponent(registLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(registComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveBut2))
                        .addGap(18, 18, 18)
                        .addComponent(avContentLabel))
                    .addComponent(seriesRentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(avFilmScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(movieRentBut, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(avSeriesScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rentSeriesBut, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(78, 78, 78)
                .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(availableContBut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(customerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(myProfileBut, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chgRegisBut, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(myRentalsBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(737, 737, 737))
        );

        adminLayeredPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        newAccBut.setText("New Acoount");
        newAccBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAccButActionPerformed(evt);
            }
        });

        dltAccBut.setText("Delete Account");
        dltAccBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dltAccButActionPerformed(evt);
            }
        });

        incomesBut.setText("Incomes of Month");
        incomesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incomesButActionPerformed(evt);
            }
        });

        addEmployeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Email", "Address ID", "Active", "Create Date"
            }
        ));
        addEmployeeScrollPane.setViewportView(addEmployeeTable);

        addEmployeeBut.setText("Add Employee");
        addEmployeeBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeButActionPerformed(evt);
            }
        });

        addCustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer ID", "First Name", "Last Name", "Email", "Address ID", "Active", "Create Date", "Registration"
            }
        ));
        addCustomerScrollPane.setViewportView(addCustomerTable);

        addCustomerBut.setText("Add Customer");
        addCustomerBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButActionPerformed(evt);
            }
        });

        noContentLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        deleteCustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer ID", "First Name", "Last Name", "Email", "Address ID", "Active", "Create Date ", "Registration"
            }
        ));
        deleteCustomerScrollPane.setViewportView(deleteCustomerTable);

        deleteEmployeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Email", "Address ID", "Active", "Create Date"
            }
        ));
        deleteEmployeeScrollPane.setViewportView(deleteEmployeeTable);

        deleteCustomerBut.setText("Delete Customer");
        deleteCustomerBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerButActionPerformed(evt);
            }
        });

        deleteEmployeeBut.setText("Delete Employee");
        deleteEmployeeBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployeeButActionPerformed(evt);
            }
        });

        makeAdministratorBut.setText("Make Administrator");
        makeAdministratorBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeAdministratorButActionPerformed(evt);
            }
        });

        deleteAdministratorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Administrator ID", "First Name", "Last Name", "Email", "Address ID", "Create Date"
            }
        ));
        deleteAdministratorScrollPane.setViewportView(deleteAdministratorTable);

        makeEmployeeBut.setText("Make Employee");
        makeEmployeeBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeEmployeeButActionPerformed(evt);
            }
        });

        noAdmin.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        incomeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"January", null},
                {"February", null},
                {"March", null},
                {"April", null},
                {"May", null},
                {"June", null},
                {"July", null},
                {"August", null},
                {"September", null},
                {"October", null},
                {"November", null},
                {"December", null}
            },
            new String [] {
                "Month", "Film Income"
            }
        ));
        incomeScrollPane.setViewportView(incomeTable);

        incomeLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        incomeLabel.setText("Incomes per Month");

        seriesIncomeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"January", null},
                {"February", null},
                {"March", null},
                {"April", null},
                {"May", null},
                {"June", null},
                {"July", null},
                {"August", null},
                {"September", null},
                {"October", null},
                {"November", null},
                {null, null}
            },
            new String [] {
                "Month", "Series Income"
            }
        ));
        seriesIncomeScrollPane.setViewportView(seriesIncomeTable);

        adminLayeredPane.setLayer(newAccBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(dltAccBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(incomesBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(addEmployeeScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(addEmployeeBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(addCustomerScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(addCustomerBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(noContentLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(deleteCustomerScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(deleteEmployeeScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(deleteCustomerBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(deleteEmployeeBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(makeAdministratorBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(deleteAdministratorScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(makeEmployeeBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(noAdmin, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(incomeScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(incomeLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        adminLayeredPane.setLayer(seriesIncomeScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout adminLayeredPaneLayout = new javax.swing.GroupLayout(adminLayeredPane);
        adminLayeredPane.setLayout(adminLayeredPaneLayout);
        adminLayeredPaneLayout.setHorizontalGroup(
            adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                        .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(addCustomerScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE)
                            .addComponent(addEmployeeScrollPane, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addEmployeeBut)
                            .addComponent(addCustomerBut)))
                    .addComponent(noContentLabel2)
                    .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                        .addComponent(deleteCustomerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteCustomerBut))
                    .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                        .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(deleteAdministratorScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteEmployeeScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                                .addComponent(deleteEmployeeBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(makeAdministratorBut))
                            .addComponent(makeEmployeeBut)))
                    .addComponent(incomeLabel)
                    .addComponent(noAdmin)
                    .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                        .addComponent(incomeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(seriesIncomeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                        .addComponent(newAccBut, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dltAccBut, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(incomesBut, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(948, Short.MAX_VALUE))
        );
        adminLayeredPaneLayout.setVerticalGroup(
            adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                        .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addEmployeeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addEmployeeBut))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addCustomerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addCustomerBut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noContentLabel2)
                .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                        .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(adminLayeredPaneLayout.createSequentialGroup()
                                .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(deleteCustomerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deleteCustomerBut))
                                .addGap(18, 18, 18)
                                .addComponent(deleteEmployeeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(deleteEmployeeBut)
                                .addComponent(makeAdministratorBut)))
                        .addGap(18, 18, 18)
                        .addComponent(deleteAdministratorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(makeEmployeeBut))
                .addGap(29, 29, 29)
                .addComponent(incomeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(incomeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seriesIncomeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(adminLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newAccBut, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dltAccBut, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(incomesBut, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(234, 234, 234)
                .addComponent(noAdmin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        custTable.setAutoCreateRowSorter(true);
        custTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer ID", "First Name", "Last Name", "Email", "Adress ID", "Active", "Create Date", "Registration"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        custScrollPane.setViewportView(custTable);

        custInfoLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        custInfoLabel.setText("Customer Info");

        updateActorsBut.setText("Actors");
        updateActorsBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActorsButActionPerformed(evt);
            }
        });

        updateMoviesBut.setText("Movies");
        updateMoviesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMoviesButActionPerformed(evt);
            }
        });

        updateSeriesBut.setText("Series");
        updateSeriesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSeriesButActionPerformed(evt);
            }
        });

        updateLanguagesBut.setText("Languages");
        updateLanguagesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateLanguagesButActionPerformed(evt);
            }
        });

        updateCategoriesBut.setText("Categories");
        updateCategoriesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCategoriesButActionPerformed(evt);
            }
        });

        updateAdressBut.setText("Adresses");
        updateAdressBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAdressButActionPerformed(evt);
            }
        });

        updateCityBut.setText("Cities");
        updateCityBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityButActionPerformed(evt);
            }
        });

        updateCountryBut.setText("Countries");
        updateCountryBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCountryButActionPerformed(evt);
            }
        });

        updateAvailableBut.setText("Available Content");
        updateAvailableBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAvailableButActionPerformed(evt);
            }
        });

        updateActorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Actor ID", "First Name", "Last Name"
            }
        ));
        updateActorScrollPane.setViewportView(updateActorTable);

        addActor.setText("Add Actor");
        addActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActorActionPerformed(evt);
            }
        });

        addSerieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Series ID", "Title", "Description", "Release Year", "Language ID", "Original Language ID ", "Seasons", "Rating", "Spacial Features"
            }
        ));
        addSeriesScrollPane.setViewportView(addSerieTable);

        addSerieBut.setText("Add Serie");
        addSerieBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSerieButActionPerformed(evt);
            }
        });

        addMovieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Film ID", "Title", "Description", "Release Year", "Language ID", "Original Language ID", "Length", "Rating", "Special Features"
            }
        ));
        addFilmScrollPane.setViewportView(addMovieTable);

        addFilmBut.setText("Add Film");
        addFilmBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFilmButActionPerformed(evt);
            }
        });

        addLanguageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Language ID", "Name"
            }
        ));
        addLanguageScrollPane.setViewportView(addLanguageTable);

        addLanguageBut.setText("Add Language");
        addLanguageBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLanguageButActionPerformed(evt);
            }
        });

        addCategoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Category ID", "Name"
            }
        ));
        addCategoryScrollPane.setViewportView(addCategoryTable);

        addCategoryBut.setText("Add Category");
        addCategoryBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryButActionPerformed(evt);
            }
        });

        addAddressTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Address ID", "Address", "District", "City ID", "Postal Code", "Phone"
            }
        ));
        addAddressScrollPane.setViewportView(addAddressTable);

        addAddressBut.setText("Add Address");
        addAddressBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAddressButActionPerformed(evt);
            }
        });

        addCityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "City ID", "City", "Country ID"
            }
        ));
        addCityScrollPane.setViewportView(addCityTable);

        addCityBut.setText("Add City");
        addCityBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCityButActionPerformed(evt);
            }
        });

        addCountryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Country ID", "Country"
            }
        ));
        addCountryScrollPane.setViewportView(addCountryTable);

        addCountryBut.setText("Add Country");
        addCountryBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCountryButActionPerformed(evt);
            }
        });

        updtAvFilmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Inventory ID", "Film ID"
            }
        ));
        updateFilmInvScrollPane.setViewportView(updtAvFilmTable);

        updtFilmInventory.setText("Update Film Inventory");
        updtFilmInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updtFilmInventoryActionPerformed(evt);
            }
        });

        updtAvSeriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Inventory ID", "Series ID"
            }
        ));
        updtAvSeriesScrollPane.setViewportView(updtAvSeriesTable);

        updtAvSeriesBut.setText("Update Series Inventory");
        updtAvSeriesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updtAvSeriesButActionPerformed(evt);
            }
        });

        seeCustBut.setText("See Customers");
        seeCustBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeCustButActionPerformed(evt);
            }
        });

        updateDBBut.setText("Update DataBase");
        updateDBBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDBButActionPerformed(evt);
            }
        });

        topBut.setText("Top 5");
        topBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topButActionPerformed(evt);
            }
        });

        rentsBut.setText("Rents");
        rentsBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentsButActionPerformed(evt);
            }
        });

        seriesRent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Customer ID", "Series ID", "Title "
            }
        ));
        rentSeriesScrollPane.setViewportView(seriesRent);

        filmRents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Customer ID", "Film ID", "Title "
            }
        ));
        rentFilmScrollPane.setViewportView(filmRents);

        rentsLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        rentsLabel.setText("Rents");

        topFilmsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Film ID", "Title"
            }
        ));
        topFilmScrollPane.setViewportView(topFilmsTable);

        topSeriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Serie ID", "Title"
            }
        ));
        topSeriesScrollPane.setViewportView(topSeriesTable);

        topLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        topLabel.setText("Top 5 Films and Series");

        employeeLayeredPane.setLayer(custScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(custInfoLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateActorsBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateMoviesBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateSeriesBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateLanguagesBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateCategoriesBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateAdressBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateCityBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateCountryBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateAvailableBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateActorScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addActor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(noContentLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addSeriesScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addSerieBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addFilmScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addFilmBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addLanguageScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addLanguageBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addCategoryScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addCategoryBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addAddressScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addAddressBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addCityScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addCityBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addCountryScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(addCountryBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateFilmInvScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updtFilmInventory, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updtAvSeriesScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updtAvSeriesBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(seeCustBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(updateDBBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(topBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(rentsBut, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(rentSeriesScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(rentFilmScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(rentsLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(topFilmScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(topSeriesScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        employeeLayeredPane.setLayer(topLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout employeeLayeredPaneLayout = new javax.swing.GroupLayout(employeeLayeredPane);
        employeeLayeredPane.setLayout(employeeLayeredPaneLayout);
        employeeLayeredPaneLayout.setHorizontalGroup(
            employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                        .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addSeriesScrollPane)
                                    .addComponent(addFilmScrollPane)
                                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                        .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                                .addComponent(addLanguageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(addLanguageBut))
                                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                                        .addComponent(noContentLabel)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(topLabel))
                                                    .addComponent(topFilmScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(topSeriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 234, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addSerieBut)
                                    .addComponent(addFilmBut)))
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(custScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 873, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(63, 63, 63))
                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                        .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(updtAvSeriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updtAvSeriesBut))
                            .addComponent(rentsLabel)
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(updateActorsBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateMoviesBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateSeriesBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateLanguagesBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateCategoriesBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateAdressBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateCityBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateCountryBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateAvailableBut))
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(updateActorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addActor))
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(addCategoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addCategoryBut))
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(addCityScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addCityBut)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                        .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(custInfoLabel)
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(rentFilmScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rentSeriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(updateFilmInvScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updtFilmInventory))
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(addAddressScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addAddressBut))
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(seeCustBut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateDBBut, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(topBut, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rentsBut))
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addComponent(addCountryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addCountryBut)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        employeeLayeredPaneLayout.setVerticalGroup(
            employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                        .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addCategoryBut)
                                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                        .addComponent(custInfoLabel)
                                        .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                                        .addComponent(custScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(updateActorsBut)
                                                            .addComponent(updateMoviesBut)
                                                            .addComponent(updateSeriesBut)
                                                            .addComponent(updateLanguagesBut)
                                                            .addComponent(updateCategoriesBut)
                                                            .addComponent(updateAdressBut)
                                                            .addComponent(updateCityBut)
                                                            .addComponent(updateCountryBut)
                                                            .addComponent(updateAvailableBut))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(updateActorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(addActor))
                                                .addGap(7, 7, 7)
                                                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                                        .addComponent(addSerieBut)
                                                        .addGap(16, 16, 16)
                                                        .addComponent(addFilmBut))
                                                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                                        .addComponent(addSeriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(addFilmScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(addLanguageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(addLanguageBut)))
                                            .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                                                .addGap(360, 360, 360)
                                                .addComponent(addCategoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addAddressScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addAddressBut))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addCityScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addCityBut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addCountryScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCountryBut, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeLayeredPaneLayout.createSequentialGroup()
                        .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateFilmInvScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updtFilmInventory, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(13, 13, 13)
                        .addComponent(updtAvSeriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(updtAvSeriesBut, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rentsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rentFilmScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rentSeriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employeeLayeredPaneLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(noContentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeLayeredPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(topLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topFilmScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topSeriesScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employeeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seeCustBut, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateDBBut, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topBut, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rentsBut, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel1.setText("Enter your email");

        jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextField1.setText("Your email...");

        jButton1.setText("Enter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adminLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jLabel1))
                .addContainerGap(1118, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeeLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(customerLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 807, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        
String str1;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        str1=jTextField1.getText();
        try {
          Connection con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
          Statement stm=con.createStatement();
          String query = ("SELECT email FROM customer;");
          ResultSet rslSet=stm.executeQuery(query);
          ResultSetMetaData metaData = rslSet.getMetaData();
          int numOfColumns = metaData.getColumnCount();
            while (rslSet.next()){
                 for (int i = 1; i <= numOfColumns; i++){
                    if(str1.equals(rslSet.getObject(i))){
                        jTextField1.setVisible(false);
                        jButton1.setVisible(false);
                        jLabel1.setVisible(false);
                        customerLayeredPane.setVisible(true);
                        myProfileBut.setVisible(true);
                        chgRegisBut.setVisible(true);
                        myRentalsBut.setVisible(true);
                        availableContBut.setVisible(true);
                    }
                 }
            }
            rslSet = stm.executeQuery("SELECT * FROM employee;");
            metaData = rslSet.getMetaData();
            numOfColumns = metaData.getColumnCount();
            while(rslSet.next()){   
                for(int i=1; i<numOfColumns; i++){
                    if(str1.equals(rslSet.getObject(i))){
                        jTextField1.setVisible(false);
                        jButton1.setVisible(false);
                        jLabel1.setVisible(false);
                        employeeLayeredPane.setVisible(true);
                        seeCustBut.setVisible(true);
                        updateDBBut.setVisible(true);
                        rentsBut.setVisible(true);
                        topBut.setVisible(true);
                    }
                }
            }
            rslSet = stm.executeQuery("SELECT * FROM administrator;");
            metaData = rslSet.getMetaData();
            numOfColumns = metaData.getColumnCount();
            while(rslSet.next()){   
                for(int i=1; i<numOfColumns; i++){
                    if(str1.equals(rslSet.getObject(i))){
                        jTextField1.setVisible(false);
                        jButton1.setVisible(false);
                        jLabel1.setVisible(false);
                        adminLayeredPane.setVisible(true);
                        newAccBut.setVisible(true);
                        dltAccBut.setVisible(true);
                        incomesBut.setVisible(true);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }                                        

    private void myProfileButActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add 
        profileScrollPane.setVisible(true);  
        saveButton.setVisible(true);
        editProfileLabel.setVisible(true);
        try {
          Connection conn = DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
          String query = "SELECT first_name,last_name,email,address,district,postal_code,phone,city,country FROM customer inner join address on customer.address_id=address.address_id inner join city on address.city_id=city.city_id inner join country on city.country_id=country.country_id where email=?;";
          PreparedStatement myStmt; 
          myStmt = conn.prepareStatement(query);
          myStmt.setString(1,str1);
          ResultSet rslSet=myStmt.executeQuery();
          ResultSetMetaData metaData = rslSet.getMetaData();
          int numOfColumns = metaData.getColumnCount();
          while(rslSet.next()){                        
                  for(int i=1; i<=numOfColumns; i++){
                      profileTable.setValueAt(rslSet.getObject(i),0,i-1 );
                  }
          }
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
    }                                            

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try{
            //Updating table customer
            Connection con= DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            String qry = "UPDATE customer SET first_name=?,last_name=? WHERE email=?;";
            PreparedStatement stm;            
            stm= con.prepareStatement(qry);
            stm.setString(1, (String) profileTable.getValueAt(0, 0));
            stm.setString(2, (String) profileTable.getValueAt(0, 1));
            stm.setString(3, (String) profileTable.getValueAt(0, 2));
            ResultSet rslSet=stm.executeQuery();
            
            //getting address id in order to update address table
            PreparedStatement statement=con.prepareStatement("SELECT address_id FROM customer WHERE email LIKE ?;");
            statement.setString(1, "%"+str1+"%");
            ResultSet rsl=statement.executeQuery();
            rsl.next();
            int addressId=(int) rsl.getObject(1);
            
            //updatetinng adrdress table
            qry = "UPDATE address SET address=?,district=?,phone=?,postal_code=? WHERE address_id=?;";
            stm=con.prepareStatement(qry);
            stm.setString(1, (String) profileTable.getValueAt(0,3));
            stm.setString(2, (String) profileTable.getValueAt(0,4));
            stm.setString(3, (String) profileTable.getValueAt(0,6));
            stm.setString(4, (String) profileTable.getValueAt(0,5));
            stm.setInt(5,addressId);
            rslSet=stm.executeQuery();
        }catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }                                          

    private void chgRegisButActionPerformed(java.awt.event.ActionEvent evt) {                                            
                registLabel.setVisible(true);
                registComboBox.setVisible(true);
                saveBut2.setVisible(true);
                try{
                    Connection con=DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                    PreparedStatement stm=con.prepareStatement("SELECT registration FROM customer WHERE email=?");
                    stm.setString(1,str1);
                    ResultSet rslt=stm.executeQuery();
                    rslt.next();
                    String selection;
                    selection=(String) rslt.getObject(1);
                    if(selection.equals("M")){
                        registComboBox.setSelectedItem("Movies for 0.4$/movie");
                    }else if(selection.equals("S")){
                        registComboBox.setSelectedItem("Series for 0.2$/episode");
                    }else if(selection.equals("MS")){
                        registComboBox.setSelectedItem("Movies & Series for 0.3$/movie & 0.1$/episode");
                    }
                }catch(SQLException e){
                    System.out.println(e.getMessage());
                }            
    }                                           

    private void saveBut2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String selection;
        selection = (String) registComboBox.getSelectedItem();
        
        try{
        Connection con= DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
        PreparedStatement stm=con.prepareStatement("UPDATE customer SET registration=? WHERE email=?;");
        if(selection.equals("Movies for 0.4$/movie")){
            stm.setString(1, "M");
            stm.setString(2,str1);
            ResultSet rslt=stm.executeQuery();
        }else if(selection.equals("Series for 0.2$/episode")){
            stm.setString(1, "S");
            stm.setString(2,str1);
            ResultSet rslt=stm.executeQuery();            
        }else{
            stm.setString(1, "MS");
            stm.setString(2,str1);
            ResultSet rslt=stm.executeQuery();
        }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }                                        

    private void profileTableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void myRentalsButActionPerformed(java.awt.event.ActionEvent evt) {                                             
        try{
            Connection con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            
            //retrieve customer id
            PreparedStatement stm= con.prepareStatement("SELECT customer_id FROM customer WHERE email=?;");
            stm.setString(1,str1);
            ResultSet rslt =stm.executeQuery();
            rslt.next();
            int cid = (int) rslt.getObject(1);
            
            //retrieve regist
            stm=con.prepareStatement("SELECT registration FROM customer WHERE email=?;");
            stm.setString(1, str1);
            rslt= stm.executeQuery();
            rslt.next();
            String regist=(String) rslt.getObject(1);
            System.out.println(regist);
            
            //regist=M
            if(regist.equals("M")){
            filmRentScrollPane.setVisible(true);
            filmTable.setVisible(true);            
            yourRentalsLabel.setVisible(true);
            seriesRentScrollPane.setVisible(false);
            seriesTable.setVisible(false);
            stm = con.prepareStatement("SELECT film.film_id, film_rental.inventory_id, film.title, film_rental.rental_date FROM film_rental INNER JOIN film_inventory on film_rental.inventory_id=film_inventory.inventory_id INNER JOIN film ON film_inventory.film_id=film.film_id WHERE customer_id=?;");
            stm.setInt(1, cid);            
            rslt =stm.executeQuery();
            ResultSetMetaData mtdt = rslt.getMetaData();
            int numOfCol = mtdt.getColumnCount();
            int numOfRows=1;
            while(rslt.next()){
                for(int i=1; i<=numOfCol; i++){
                    filmTable.setValueAt(rslt.getObject(i), numOfRows, i-1);
                }
                numOfRows++;
            }
            
            }
            
            //regist=S
            else if(regist.equals("S")){
            stm = con.prepareStatement("SELECT series.series_id, series_rental.inventory_id, series.title, series_rental.rental_date FROM series_rental INNER JOIN series_inventory on series_rental.inventory_id=series_inventory.inventory_id INNER JOIN series ON series_inventory.series_id=series.series_id WHERE customer_id=?;");
            stm.setInt(1, cid);
            ResultSetMetaData mtdt2 = rslt.getMetaData();
            int numOfColum = mtdt2.getColumnCount();
            int numOfRows2=1;
            while(rslt.next()){
                for(int i=0; i<=numOfColum; i++){
                    seriesTable.setValueAt(rslt.getObject(i), numOfRows2, i-1);
                }
                numOfRows2++;
            }
            seriesRentScrollPane.setVisible(true);
            seriesTable.setVisible(true);
            yourRentalsLabel.setVisible(true);
            filmRentScrollPane.setVisible(false);
            filmTable.setVisible(false);
            }
            
            //regist=MS
            else if(regist.equals("MS")){
                stm = con.prepareStatement("SELECT series_id, inventory_id, title, rental_date FROM series_rental INNER JOIN series_inventory on series_rental.inventory_id=series_inventory.inventory_id INNER JOIN series ON film_inventory.series_id=series.series_id WHERE customer_id=?;");
            stm.setInt(1, cid);
            ResultSetMetaData mtdt2 = rslt.getMetaData();
            int numOfColum = mtdt2.getColumnCount();
            int numOfRows2=1;
            while(rslt.next()){
                for(int i=0; i<=numOfColum; i++){
                    seriesTable.setValueAt(rslt.getObject(i), numOfRows2, i-1);
                }
            }
            seriesRentScrollPane.setVisible(true);
            seriesTable.setVisible(true);
            yourRentalsLabel.setVisible(true);
            
            stm = con.prepareStatement("SELECT film.film_id, film_rental.inventory_id, film.title, film_rental.rental_date FROM film_rental INNER JOIN film_inventory on film_rental.inventory_id=film_inventory.inventory_id INNER JOIN film ON film_inventory.film_id=film.film_id WHERE customer_id=?;");
            stm.setInt(1, cid);            
            rslt =stm.executeQuery();
            ResultSetMetaData mtdt = rslt.getMetaData();
            int numOfCol = mtdt.getColumnCount();
            int numOfRows=1;
            while(rslt.next()){
                for(int i=1; i<=numOfCol; i++){
                    filmTable.setValueAt(rslt.getObject(i), numOfRows, i-1);
                }
                numOfRows++;
            }
            filmRentScrollPane.setVisible(true);
            filmTable.setVisible(true);            
            yourRentalsLabel.setVisible(true);
            }
            
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }        
    }                                            

    private void availableContButActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        try{
            Connection con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            PreparedStatement stm=con.prepareStatement("SELECT registration FROM customer WHERE email=?;");
            stm.setString(1, str1);
            ResultSet rslt= stm.executeQuery();
            rslt.next();
            String regist=(String) rslt.getObject(1);
            if(regist.equals("M")){
               
                Statement state=con.createStatement();
                rslt=state.executeQuery("select film_inventory.film_id,title,release_year,rating,special_features,description from film_inventory inner join film on film_inventory.film_id=film.film_id;");
                ResultSetMetaData mtdt=rslt.getMetaData();
                int numOfColumns= mtdt.getColumnCount();
                int numOfRows=0;
                while(rslt.next()){
                    for(int i=1; i<=numOfColumns; i++){
                        
                        avFilmTable.setValueAt(rslt.getObject(i),numOfRows,i-1 );
                    }
                    numOfRows++;
                }
                avFilmTable.setVisible(true);
                avContentLabel.setVisible(true);
                avFilmScrollPane.setVisible(true);
                customerLayeredPane.revalidate();
                customerLayeredPane.repaint();
                avSeriesScrollPane.setVisible(false);
                movieRentBut.setVisible(true);
                rentSeriesBut.setVisible(false);
                
            }else if(regist.equals("S")){
                Statement state= con.createStatement();
                rslt=state.executeQuery("select series_inventory.series_id,title,release_year,rating,special_features,description,seasons from series_inventory inner join series on series_inventory.series_id=series.series_id;");
                ResultSetMetaData mtdt=rslt.getMetaData();
                int numOfColumns= mtdt.getColumnCount();
                int numOfRows=0;
                while(rslt.next()){
                    for(int i=1; i<=numOfColumns; i++){
                        avSeriesTable.setValueAt(rslt.getObject(i),numOfRows,i-1 );
                    }
                    numOfRows++;
                }
                avSeriesTable.setVisible(true);
                avContentLabel.setVisible(true);
                avSeriesScrollPane.setVisible(true);
                customerLayeredPane.revalidate();
                customerLayeredPane.repaint();
                avFilmScrollPane.setVisible(false);
                movieRentBut.setVisible(false);
                rentSeriesBut.setVisible(true);
            }else if(regist.equals("MS")){
                Statement state= con.createStatement();
                rslt=state.executeQuery("select series_inventory.series_id,title,release_year,rating,special_features,description,seasons from series_inventory inner join series on series_inventory.series_id=series.series_id;");
                ResultSetMetaData mtdt=rslt.getMetaData();
                int numOfColumns= mtdt.getColumnCount();
                int numOfRows=0;
                while(rslt.next()){
                    for(int i=1; i<=numOfColumns; i++){
                        avSeriesTable.setValueAt(rslt.getObject(i),numOfRows,i-1 );
                    }
                    numOfRows++;
                }
                avSeriesTable.setVisible(true);
                avContentLabel.setVisible(true);
                avSeriesScrollPane.setVisible(true);
                customerLayeredPane.revalidate();
                customerLayeredPane.repaint();
                state=con.createStatement();
                rslt=state.executeQuery("select film_inventory.film_id,title,release_year,rating,special_features,description from film_inventory inner join film on film_inventory.film_id=film.film_id;");
                mtdt=rslt.getMetaData();
                numOfColumns= mtdt.getColumnCount();
                numOfRows=0;
                while(rslt.next()){
                    for(int i=1; i<=numOfColumns; i++){
                        avFilmTable.setValueAt(rslt.getObject(i),numOfRows,i-1 );
                    }
                    numOfRows++;
                }
                avFilmTable.setVisible(true);
                avContentLabel.setVisible(true);
                avFilmScrollPane.setVisible(true);
                customerLayeredPane.revalidate();
                customerLayeredPane.repaint();
                movieRentBut.setVisible(true);
                rentSeriesBut.setVisible(true);
            }
      
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        
    }                                                

    private void movieRentButActionPerformed(java.awt.event.ActionEvent evt) {                                             
        int row=avFilmTable.getSelectedRow();
        int filmId= (int) avFilmTable.getValueAt(row, 0);
        System.out.println(filmId);
        try{
            Connection con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            PreparedStatement stm = con.prepareStatement("SELECT inventory_id FROM film_inventory WHERE film_id=?;");
            stm.setInt(1, (int) filmId);
            ResultSet rslt = stm.executeQuery();
            rslt.next();
            int inId=(int) rslt.getObject(1);
            stm=con.prepareStatement("SELECT customer_id FROM customer WHERE email=?;");
            stm.setString(1,str1);
            rslt=stm.executeQuery();
            rslt.next();
            int cid=(int) rslt.getObject(1);
            stm=con.prepareStatement("INSERT INTO film_rental (rental_id,rental_date,inventory_id,customer_id) VALUES (default,NOW(),?,?);");
            stm.setInt(1,inId);
            stm.setInt(2, cid);      
            stm.executeUpdate();
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }                                            

    private void rentSeriesButActionPerformed(java.awt.event.ActionEvent evt) {                                              
        int row=avSeriesTable.getSelectedRow();
        Object seriesId = avSeriesTable.getValueAt(row,0);      
        
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            PreparedStatement stm = con.prepareStatement("SELECT inventory_id FROM series_inventory WHERE series_id=?;");
            stm.setInt(1, (int) seriesId);
            //System.out.println(seriesId);
            ResultSet rslt = stm.executeQuery();
            rslt.next();
            int inId =(int) rslt.getObject(1);
           // System.out.println(inId);
            stm=con.prepareStatement("SELECT customer_id FROM customer WHERE email=?;");
            stm.setString(1, str1);
            rslt=stm.executeQuery();
            rslt.next();
            int cid = (int) rslt.getObject(1);
            //System.out.println(cid);
            stm=con.prepareStatement("INSERT INTO series_rental (rental_id,rental_date , inventory_id , customer_id ) VALUES (default,NOW(),?,?);");
            stm.setInt(1,inId);
            stm.setInt(2,cid);
            stm.executeUpdate();
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }                                             

    private void newAccButActionPerformed(java.awt.event.ActionEvent evt) {                                          
        addCustomerTable.setVisible(true);
        addCustomerScrollPane.setVisible(true);
        addCustomerBut.setVisible(true);
        addEmployeeTable.setVisible(true);
        addEmployeeScrollPane.setVisible(true);
        addEmployeeBut.setVisible(true);
    }                                         

    private void addEmployeeButActionPerformed(java.awt.event.ActionEvent evt) {                                               
        int employeeId, addressId, active;
        String lastName, firstName, email, createDate;
        employeeId = (int) addEmployeeTable.getValueAt(0, 0);
        firstName = (String) addEmployeeTable.getValueAt(0, 1);
        lastName = (String) addEmployeeTable.getValueAt(0, 2);
        email = (String) addEmployeeTable.getValueAt(0, 3);
        addressId = (int) addEmployeeTable.getValueAt(0, 4);
        active = (int) addEmployeeTable.getValueAt(0, 5);
        createDate = (String) addEmployeeTable.getValueAt(0, 6);
        if(employeeId==0 || firstName.equals(null) || lastName.equals(null) || email.equals(null) || addressId==0 || active!=1 || active!=0 || createDate.equals(null)){
            noContentLabel2.setText("Fill all the values");
        }else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO employee (employee_id, first_name, last_name, email, address_id, active, create_date) VALUES ?,?,?,?,?,?,?;");
                stm.setInt(1, employeeId);
                stm.setString(2, firstName);
                stm.setString(3, lastName);
                stm.setString(4, email);
                stm.setInt(5, addressId);
                stm.setInt(6, active);
                stm.setString(7, createDate);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                              

    private void addCustomerButActionPerformed(java.awt.event.ActionEvent evt) {                                               
        int employeeId, addressId, active;
        String lastName, firstName, email, createDate, registration;
        employeeId = (int) addCustomerTable.getValueAt(0, 0);
        firstName = (String) addCustomerTable.getValueAt(0, 1);
        lastName = (String) addCustomerTable.getValueAt(0, 2);
        email = (String) addCustomerTable.getValueAt(0, 3);
        addressId = (int) addCustomerTable.getValueAt(0, 4);
        active = (int) addCustomerTable.getValueAt(0, 5);
        createDate = (String) addCustomerTable.getValueAt(0, 6);
        registration = (String) addCustomerTable.getValueAt(0, 7);
        if(employeeId==0 || firstName.equals(null) || lastName.equals(null) || email.equals(null) || addressId==0 || active!=1 || active!=0 || createDate.equals(null) || registration.equals(null)){
            noContentLabel2.setText("Fill all the values");
        }else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO customer (customer_id, first_name, last_name, email, address_id, active, create_date, registration) VALUES ?,?,?,?,?,?,?,?;");
                stm.setInt(1, employeeId);
                stm.setString(2, firstName);
                stm.setString(3, lastName);
                stm.setString(4, email);
                stm.setInt(5, addressId);
                stm.setInt(6, active);
                stm.setString(7, createDate);
                stm.setString(8, registration);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                              

    private void dltAccButActionPerformed(java.awt.event.ActionEvent evt) {                                          
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            Statement stm = con.createStatement();
            ResultSet rslt = stm.executeQuery("SELECT * FROM customer");
            ResultSetMetaData mtdt = rslt.getMetaData();
            int colums = mtdt.getColumnCount();
            int row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){

                    deleteCustomerTable.setValueAt(rslt.getObject(i),row,i-1 );
                }
                row++;
            }
            rslt = stm.executeQuery("SELECT * FROM employee");
            mtdt = rslt.getMetaData();
            int columsNum = mtdt.getColumnCount();
            int rowNum = 0;
             while(rslt.next()){
                for(int i=1; i<=columsNum; i++){

                    deleteEmployeeTable.setValueAt(rslt.getObject(i),rowNum,i-1 );
                }
                rowNum++;
            }
            rslt = stm.executeQuery("SELECT * FROM administrator");
            mtdt = rslt.getMetaData();
            columsNum = mtdt.getColumnCount();
            rowNum = 0;
            while(rslt.next()){
                for(int i=1; i<=columsNum; i++){

                    deleteAdministratorTable.setValueAt(rslt.getObject(i),rowNum,i-1 );
                }
                rowNum++;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        deleteEmployeeTable.setVisible(true);
        deleteEmployeeBut.setVisible(true);
        deleteCustomerTable.setVisible(true);
        deleteCustomerBut.setVisible(true);
        deleteEmployeeScrollPane.setVisible(true);
        deleteCustomerScrollPane.setVisible(true);
        deleteAdministratorScrollPane.setVisible(true);
        makeAdministratorBut.setVisible(true);
        makeEmployeeBut.setVisible(true);
    }                                         

    private void deleteCustomerButActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            int row = deleteCustomerTable.getSelectedRowCount();
            int cid = (int) deleteCustomerTable.getValueAt(row, 0);
            PreparedStatement stm = con.prepareStatement("DELETE FROM customer WHERE customer_id=?;");
            stm.setInt(1, cid);
            stm.executeUpdate();
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }                                                 

    private void deleteEmployeeButActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            int row = deleteEmployeeTable.getSelectedRowCount();
            int emid = (int) deleteEmployeeTable.getValueAt(row, 0);
            PreparedStatement stm = con.prepareStatement("DELETE FROM employee WHERE employee_id=?;");
            stm.setInt(1, emid);
            stm.executeUpdate();
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }                                                 

    private void makeAdministratorButActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        int row, employeeId, addressId;
        String firstName, lastName, email;
        row = deleteEmployeeTable.getSelectedRowCount();
        employeeId = (int) deleteEmployeeTable.getValueAt(row , 0);
        firstName = (String) deleteEmployeeTable.getValueAt(row, 1);
        lastName = (String) deleteEmployeeTable.getValueAt(row, 2);
        email = (String) deleteEmployeeTable.getValueAt(row, 3);
        addressId = (int) deleteEmployeeTable.getValueAt(row, 4);
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            PreparedStatement stm = con.prepareStatement("INSERT INTO administrator (administrator_id, first_name, last_name, email, address_id, create_date) VALUES ?,?,?,?,?,?;");
            stm.setInt(1, employeeId);
            stm.setString(2, firstName);
            stm.setString(3, lastName);
            stm.setString(4, email);
            stm.setInt(5, addressId);
            stm.setString(6, "NOW()");
            stm.executeUpdate();
            stm = con.prepareStatement("DELETE FROM employee WHERE employee_id=?;");
            stm.setInt(1, employeeId);
            stm.executeUpdate();
        }catch(SQLException e){
            System.out.print(e.getMessage());
        }
    }                                                    

    private void makeEmployeeButActionPerformed(java.awt.event.ActionEvent evt) {                                                
        int administratorId, addressId;
        String firstName, lastName, email;
        int row = deleteAdministratorTable.getSelectedRowCount();
        administratorId = (int) deleteAdministratorTable.getValueAt(row, 0);
        firstName = (String) deleteAdministratorTable.getValueAt(row, 1);
        lastName = (String) deleteAdministratorTable.getValueAt(row, 2);
        email = (String) deleteAdministratorTable.getValueAt(row, 3);
        addressId = (int) deleteAdministratorTable.getValueAt(row, 4);
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            Statement stm = con.createStatement();
            ResultSet rslt = stm.executeQuery("SELECT * FROM administrator;");
            ResultSetMetaData mtdt = rslt.getMetaData();
            rslt.next();
            if(!rslt.next()){
                noAdmin.setText("There is only one administrator!!");
            }else{
            PreparedStatement pstm = con.prepareStatement("DELETE FROM administrator WHERE administrator_id=?;");
            pstm.setInt(1, administratorId);
            pstm.executeUpdate();
            pstm = con.prepareStatement("INSERT INTO employee (employee_id, first_name, last_name, email, address_id, active, create_date, registration) VALUES ?,?,?,?,?,?,?,?;");
            pstm.setInt(1, administratorId);
            pstm.setString(2, firstName);
            pstm.setString(3, lastName);
            pstm.setString(4, email);
            pstm.setInt(5, addressId);
            pstm.setInt(6, 1);
            pstm.setString(7, "NOW()");
            pstm.setString(8, "M");
            pstm.executeUpdate();
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }                                               

    private void incomesButActionPerformed(java.awt.event.ActionEvent evt) {                                           
            incomeTable.setVisible(true);
            incomeScrollPane.setVisible(true);
            seriesIncomeTable.setVisible(true);
            seriesIncomeScrollPane.setVisible(true);
            incomeLabel.setVisible(true);
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            CallableStatement callIncome = con.prepareCall("{call film_incomes(?)}");
            callIncome.setString(1, "January");
            ResultSet rslt = callIncome.executeQuery();
            ResultSetMetaData mtdt = rslt.getMetaData();
            int colums = mtdt.getColumnCount();
            int row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "February");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "March");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "April");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "May");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "June");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "July");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "August");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "September");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "October");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "November");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome.setString(1, "December");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            //row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    incomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "January");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "February");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "March");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "April");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "May");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "June");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "July");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "August");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "September");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "October");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "November");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
            callIncome = con.prepareCall("{call series_incomes(?)}");
            callIncome.setString(1, "December");
            rslt = callIncome.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesIncomeTable.setValueAt(rslt.getObject(i), row, i);
                }
                row++;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        
    }                                          

    private void rentsButActionPerformed(java.awt.event.ActionEvent evt) {                                         
        rentSeriesScrollPane.setVisible(true);
        rentFilmScrollPane.setVisible(true);
        filmRents.setVisible(true);
        seriesRent.setVisible(true);
        rentsLabel.setVisible(true);
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            Statement stm = con.createStatement();
            ResultSet rslt = stm.executeQuery("SELECT customer_id, film.title, film.film_id FROM customer INNER JOIN film_payment ON customer.customer_id=film_payment.customer_id INNER JOIN film_rental ON film_payment.rental_id=film_rental.rental_id INNER JOIN film_inventory ON film_rental.inventory_id=film_innventory.inventory_id;");
            ResultSetMetaData mtdt = rslt.getMetaData();
            int colums = mtdt.getColumnCount();
            int rows = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    filmRents.setValueAt(rslt.getObject(i), rows, i-1);
                }
                rows++;
            }
            rslt = stm.executeQuery("SELECT customer_id, series.title, series.series_id FROM customer INNER JOIN series_payment ON customer.customer_id=series_payment.customer_id INNER JOIN series_rental ON series_payment.rental_id=series_rental.rental_id INNER JOIN series_inventory ON series_rental.inventory_id=series_innventory.inventory_id;");
            colums = mtdt.getColumnCount();
            rows = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    seriesRent.setValueAt(rslt.getObject(i), rows, i-1);
                }
                rows++;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }                                        

    private void topButActionPerformed(java.awt.event.ActionEvent evt) {                                       
        topFilmsTable.setVisible(true);
        topFilmScrollPane.setVisible(true);
        topSeriesScrollPane.setVisible(true);
        topSeriesTable.setVisible(true);
        topLabel.setVisible(true);
        String stored = "{call top(?,?,?,?)}";
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            CallableStatement callTop = con.prepareCall(stored);
            callTop.setString(1, "m");
            callTop.setInt(2, 5);
            callTop.setString(4, "NOW()");
            callTop.setString(3, "DATE_SUB(NOW, INTERVAL 31 DAY)");
            ResultSet rslt = callTop.executeQuery();
            ResultSetMetaData mtdt = rslt.getMetaData();
            int colums = mtdt.getColumnCount();
            int row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    topFilmsTable.setValueAt(rslt.getObject(i),row,i-1 );
                }
                row++;
            }
            callTop.setString(1, "s");
            callTop.setInt(2, 5);
            callTop.setString(4, "NOW()");
            callTop.setString(3, "DATE_SUB(NOW, INTERVAL 31 DAY)");
            rslt = callTop.executeQuery();
            mtdt = rslt.getMetaData();
            colums = mtdt.getColumnCount();
            row = 0;
            while(rslt.next()){
                for(int i=1; i<=colums; i++){
                    topSeriesTable.setValueAt(rslt.getObject(i), row, i-1);
                }
                row++;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }                                      

    private void updateDBButActionPerformed(java.awt.event.ActionEvent evt) {                                            
        updateActorsBut.setVisible(true);
        updateMoviesBut.setVisible(true);
        updateSeriesBut.setVisible(true);
        updateLanguagesBut.setVisible(true);
        updateCategoriesBut.setVisible(true);
        updateAdressBut.setVisible(true);
        updateCityBut.setVisible(true);
        updateCountryBut.setVisible(true);
        updateAvailableBut.setVisible(true);
    }                                           

    private void seeCustButActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try{
            Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
            Statement stm =con.createStatement();
            ResultSet rslt=stm.executeQuery("SELECT * FROM customer;");
            ResultSetMetaData mtd=rslt.getMetaData();
            int col = mtd.getColumnCount();
            int rows=0;
            while(rslt.next()){
                for(int i=1; i<=col; i++){

                    custTable.setValueAt(rslt.getObject(i),rows,i-1 );
                }
                rows++;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        custScrollPane.setVisible(true);
        custTable.setVisible(true);
        custInfoLabel.setVisible(true);
    }                                          

    private void updtAvSeriesButActionPerformed(java.awt.event.ActionEvent evt) {                                                
        int inventoryId, seriesId;
        inventoryId = (int) updtAvFilmTable.getValueAt(0, 0);
        seriesId = (int) updtAvFilmTable.getValueAt(0, 1);
        if(inventoryId==0 || seriesId==0){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO series_inventory (inventory_id, series_id) VALUES ?,?;");
                stm.setInt(1, inventoryId);
                stm.setInt(2, seriesId);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                               

    private void updtFilmInventoryActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        int inventoryId, filmId;
        inventoryId = (int) updtAvFilmTable.getValueAt(0, 0);
        filmId = (int) updtAvFilmTable.getValueAt(0, 1);
        if(inventoryId==0 || filmId==0){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO film_inventory (inventory_id, film_id) VALUES ?,?;");
                stm.setInt(1, inventoryId);
                stm.setInt(2, filmId);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                                 

    private void addCountryButActionPerformed(java.awt.event.ActionEvent evt) {                                              
        int countryId;
        String country;
        countryId = (int) addCityTable.getValueAt(0, 0);
        country = (String) addCityTable.getValueAt(0, 1);
        if(countryId==0 || country.equals(null)){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO city (city_id, city, country_id) VALUES ?,?,?;");
                stm.setInt(1, countryId);
                stm.setString(2, country);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                             

    private void addCityButActionPerformed(java.awt.event.ActionEvent evt) {                                           
        int cityId, countryId;
        String city;
        cityId = (int) addCityTable.getValueAt(0, 0);
        city = (String) addCityTable.getValueAt(0, 1);
        countryId = (int) addCityTable.getValueAt(0, 2);
        if(cityId==0 || city.equals(null) || countryId==0){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO city (city_id, city, country_id) VALUES ?,?,?;");
                stm.setInt(1, cityId);
                stm.setString(2, city);
                stm.setInt(3, countryId);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                          

    private void addAddressButActionPerformed(java.awt.event.ActionEvent evt) {                                              
        int addressId, cityId, postalCode, phone;
        String address, district;
        addressId = (int) addAddressTable.getValueAt(0, 0);
        address = (String) addAddressTable.getValueAt(0, 1);
        district = (String) addAddressTable.getValueAt(0, 2);
        cityId = (int) addAddressTable.getValueAt(0, 3);
        postalCode = (int) addAddressTable.getValueAt(0, 4);
        phone = (int) addAddressTable.getValueAt(0, 5);
        if(addressId==0 || address.equals(null) || district.equals(null) || cityId==0 || postalCode==0 || phone==0){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO address (address_id, address, district, city_id, postal_code, phone) VALUES ?,?,?,?,?,?;");
                stm.setInt(1, addressId);
                stm.setString(2, address);
                stm.setString(3, district);
                stm.setInt(5, postalCode);
                stm.setInt(6, phone);
                stm.setInt(4, cityId);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                             

    private void addCategoryButActionPerformed(java.awt.event.ActionEvent evt) {                                               
        int categoryId;
        String name;
        categoryId = (int) addCategoryTable.getValueAt(0, 0);
        name = (String) addCategoryTable.getValueAt(0, 1);
        if(categoryId==0 || name.equals(null)){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO category (category_id, name) VALUES ?,?;");
                stm.setInt(1, categoryId);
                stm.setString(2, name);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                              

    private void addLanguageButActionPerformed(java.awt.event.ActionEvent evt) {                                               
        int languageId;
        String name;
        languageId= (int) addLanguageTable.getValueAt(0, 0);
        name = (String) addLanguageTable.getValueAt(0, 1);
        if(languageId==0 || name.equals(null)){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO language (language_id, name)VALUES ?,?;");
                stm.setInt(1, languageId);
                stm.setString(2, name);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                              

    private void addFilmButActionPerformed(java.awt.event.ActionEvent evt) {                                           
        int filmId, releaseYear, languageId, originalLanguageId, length;
        String title, description, rating, specialFeatures;
        filmId = (int) addSerieTable.getValueAt(0, 0);
        title =(String) addSerieTable.getValueAt(0, 1);
        description =(String) addSerieTable.getValueAt(0, 2);
        releaseYear = (int) addSerieTable.getValueAt(0, 3);
        languageId = (int) addSerieTable.getValueAt(0, 4);
        originalLanguageId = (int) addSerieTable.getValueAt(0, 5);
        length = (int) addSerieTable.getValueAt(0, 6);
        rating = (String) addSerieTable.getValueAt(0, 7);
        specialFeatures = (String) addSerieTable.getValueAt(0, 8);
        if(filmId==0 || title.equals(null) || description.equals(null) || releaseYear==0 || languageId==0 || originalLanguageId==0 || length==0 || rating.equals(null) || specialFeatures.equals(null)){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO film (film_id, title, description, release_year, language_id, original_language_id, length, rating, special_features) VALUES ?,?,?,?,?,?,?,?,?;");
                stm.setInt(1, filmId);
                stm.setString(2, title);
                stm.setString(3, description);
                stm.setInt(4,releaseYear);
                stm.setInt(5, languageId);
                stm.setInt(6, originalLanguageId);
                stm.setInt(7,length);
                stm.setString(9, specialFeatures);
                stm.setString(8, rating);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                          

    private void addSerieButActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int serieId, releaseYear, languageId, originalLanguageId, seasons;
        String title, description, rating, specialFeatures;
        serieId = (int) addSerieTable.getValueAt(0, 0);
        title =(String) addSerieTable.getValueAt(0, 1);
        description =(String) addSerieTable.getValueAt(0, 2);
        releaseYear = (int) addSerieTable.getValueAt(0, 3);
        languageId = (int) addSerieTable.getValueAt(0, 4);
        originalLanguageId = (int) addSerieTable.getValueAt(0, 5);
        seasons = (int) addSerieTable.getValueAt(0, 6);
        rating = (String) addSerieTable.getValueAt(0, 7);
        specialFeatures = (String) addSerieTable.getValueAt(0, 8);
        if(serieId==0 || title.equals(null) || description.equals(null) || releaseYear==0 || languageId==0 || originalLanguageId==0 || seasons==0 || rating.equals(null) || specialFeatures.equals(null)){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO series (series_id, title, description, release_year, language_id, original_language_id, seasons, rating, special_features) VALUES ?,?,?,?,?,?,?,?,?;");
                stm.setInt(1, serieId);
                stm.setString(2, title);
                stm.setString(3, description);
                stm.setInt(4,releaseYear);
                stm.setInt(5, languageId);
                stm.setInt(6, originalLanguageId);
                stm.setInt(7,seasons);
                stm.setString(9, specialFeatures);
                stm.setString(8, rating);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                           

    private void addActorActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int actorId;
        String firstName, lastName;
        actorId = (int) updateActorTable.getValueAt(0, 0);
        firstName =(String) updateActorTable.getValueAt(0, 1);
        lastName =(String) updateActorTable.getValueAt(0, 2);
        if(actorId==0 || firstName.equals(null) || lastName.equals(null)){
            noContentLabel.setText("Fill all the elemnts");
        }
        else{
            try{
                Connection con =DriverManager.getConnection("jdbc:mariadb://localhost:3306/tvondemand","root","");
                PreparedStatement stm = con.prepareStatement("INSERT INTO actors (actor_id, first_name, last_name) VALUES ?,?,?;");
                stm.setInt(1, actorId);
                stm.setString(2, firstName);
                stm.setString(3, lastName);
                stm.executeUpdate();
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
    }                                        

    private void updateAvailableButActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        updtAvFilmTable.setVisible(true);
        updtFilmInventory.setVisible(true);
        updtAvSeriesTable.setVisible(true);
        updtAvSeriesBut.setVisible(true);
        updateFilmInvScrollPane.setVisible(true);
        updtAvSeriesScrollPane.setVisible(true);
    }                                                  

    private void updateCountryButActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        addCountryBut.setVisible(true);
        addCountryScrollPane.setVisible(true);
        addCountryTable.setVisible(true);
    }                                                

    private void updateCityButActionPerformed(java.awt.event.ActionEvent evt) {                                              
        addCityBut.setVisible(true);
        addCityScrollPane.setVisible(true);
        addCityTable.setVisible(true);
    }                                             

    private void updateAdressButActionPerformed(java.awt.event.ActionEvent evt) {                                                
        addAddressBut.setVisible(true);
        addAddressScrollPane.setVisible(true);
        addAddressTable.setVisible(true);
    }                                               

    private void updateCategoriesButActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        addCategoryBut.setVisible(true);
        addCategoryScrollPane.setVisible(true);
        addCategoryTable.setVisible(true);
    }                                                   

    private void updateLanguagesButActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        addLanguageBut.setVisible(true);
        addLanguageTable.setVisible(true);
        addLanguageScrollPane.setVisible(true);
    }                                                  

    private void updateSeriesButActionPerformed(java.awt.event.ActionEvent evt) {                                                
        addSerieBut.setVisible(true);
        addSeriesScrollPane.setVisible(true);
        addSerieTable.setVisible(true);
    }                                               

    private void updateMoviesButActionPerformed(java.awt.event.ActionEvent evt) {                                                
        addFilmBut.setVisible(true);
        addFilmScrollPane.setVisible(true);
        addMovieTable.setVisible(true);
    }                                               

    private void updateActorsButActionPerformed(java.awt.event.ActionEvent evt) {                                                
        updateActorTable.setVisible(true);
        updateActorScrollPane.setVisible(true);
        addActor.setVisible(true);
    }                                               

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
                
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
                newAccBut.setVisible(false);
                dltAccBut.setVisible(false);
                incomesBut.setVisible(false);
                chgRegisBut.setVisible(false);
                myRentalsBut.setVisible(false);
                availableContBut.setVisible(false);
                seeCustBut.setVisible(false);
                updateDBBut.setVisible(false);
                rentsBut.setVisible(false);
                topBut.setVisible(false);
                myProfileBut.setVisible(false);
                saveButton.setVisible(false);
                editProfileLabel.setVisible(false);
                registLabel.setVisible(false);
                registComboBox.setVisible(false);
                saveBut2.setVisible(false);
                profileScrollPane.setVisible(false);
                customerLayeredPane.setVisible(false);
                employeeLayeredPane.setVisible(false);
                adminLayeredPane.setVisible(false);
                yourRentalsLabel.setVisible(false);
                avContentLabel.setVisible(false);
                avFilmScrollPane.setVisible(false);
                avSeriesScrollPane.setVisible(false);
                filmTable.setVisible(false);
                seriesTable.setVisible(false);
                rentSeriesBut.setVisible(false);
                movieRentBut.setVisible(false);
                seriesTable.setVisible(false);
                filmTable.setVisible(false);
                filmRentScrollPane.setVisible(false);
                seriesRentScrollPane.setVisible(false);
                yourRentalsLabel.setVisible(false);
                custTable.setVisible(false);
                custScrollPane.setVisible(false);
                custInfoLabel.setVisible(false);
                updateActorsBut.setVisible(false);
                updateMoviesBut.setVisible(false);
                updateSeriesBut.setVisible(false);
                updateLanguagesBut.setVisible(false);
                updateCategoriesBut.setVisible(false);
                updateAdressBut.setVisible(false);
                updateCityBut.setVisible(false);
                updateCountryBut.setVisible(false);
                updateAvailableBut.setVisible(false);
                updateActorTable.setVisible(false);
                addActor.setVisible(false);
                addSerieTable.setVisible(false);
                addSerieBut.setVisible(false);
                addFilmBut.setVisible(false);
                addMovieTable.setVisible(false);
                addLanguageBut.setVisible(false);
                addLanguageTable.setVisible(false);
                addCategoryBut.setVisible(false);
                addCategoryTable.setVisible(false);
                addAddressBut.setVisible(false);
                addAddressTable.setVisible(false);
                addCityBut.setVisible(false);
                addCityTable.setVisible(false);
                addCountryTable.setVisible(false);
                addCountryBut.setVisible(false);
                filmRents.setVisible(false);
                seriesRent.setVisible(false);
                rentsLabel.setVisible(false);
                topFilmsTable.setVisible(false);
                topSeriesTable.setVisible(false);
                addEmployeeTable.setVisible(false);
                addEmployeeBut.setVisible(false);
                addCustomerTable.setVisible(false);
                addCustomerBut.setVisible(false);
                deleteCustomerTable.setVisible(false);
                deleteCustomerBut.setVisible(false);
                deleteEmployeeTable.setVisible(false);
                deleteEmployeeBut.setVisible(false);
                incomeLabel.setVisible(false);
                incomeTable.setVisible(false);
                incomeScrollPane.setVisible(false);
                seriesIncomeTable.setVisible(false);
                seriesIncomeScrollPane.setVisible(false);
                deleteAdministratorScrollPane.setVisible(false);
                deleteEmployeeScrollPane.setVisible(false);
                deleteCustomerScrollPane.setVisible(false);
                addCustomerScrollPane.setVisible(false);
                addEmployeeScrollPane.setVisible(false);
                makeAdministratorBut.setVisible(false);
                makeEmployeeBut.setVisible(false);
                custScrollPane.setVisible(false);
                updateActorScrollPane.setVisible(false);
                addSeriesScrollPane.setVisible(false);
                addFilmScrollPane.setVisible(false);
                addLanguageScrollPane.setVisible(false);
                addCategoryScrollPane.setVisible(false);
                addAddressScrollPane.setVisible(false);
                addCityScrollPane.setVisible(false);
                addCountryScrollPane.setVisible(false);
                updateFilmInvScrollPane.setVisible(false);
                updtAvSeriesScrollPane.setVisible(false);
                rentSeriesScrollPane.setVisible(false);
                rentFilmScrollPane.setVisible(false);
                topFilmScrollPane.setVisible(false);
                topSeriesScrollPane.setVisible(false);
                updtFilmInventory.setVisible(false);
                updtAvSeriesBut.setVisible(false);
                topLabel.setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify                     
    private static javax.swing.JButton addActor;
    private static javax.swing.JButton addAddressBut;
    private static javax.swing.JScrollPane addAddressScrollPane;
    private static javax.swing.JTable addAddressTable;
    private static javax.swing.JButton addCategoryBut;
    private static javax.swing.JScrollPane addCategoryScrollPane;
    private static javax.swing.JTable addCategoryTable;
    private static javax.swing.JButton addCityBut;
    private static javax.swing.JScrollPane addCityScrollPane;
    private static javax.swing.JTable addCityTable;
    private static javax.swing.JButton addCountryBut;
    private static javax.swing.JScrollPane addCountryScrollPane;
    private static javax.swing.JTable addCountryTable;
    private static javax.swing.JButton addCustomerBut;
    private static javax.swing.JScrollPane addCustomerScrollPane;
    private static javax.swing.JTable addCustomerTable;
    private static javax.swing.JButton addEmployeeBut;
    private static javax.swing.JScrollPane addEmployeeScrollPane;
    private static javax.swing.JTable addEmployeeTable;
    private static javax.swing.JButton addFilmBut;
    private static javax.swing.JScrollPane addFilmScrollPane;
    private static javax.swing.JButton addLanguageBut;
    private static javax.swing.JScrollPane addLanguageScrollPane;
    private static javax.swing.JTable addLanguageTable;
    private static javax.swing.JTable addMovieTable;
    private static javax.swing.JButton addSerieBut;
    private static javax.swing.JTable addSerieTable;
    private static javax.swing.JScrollPane addSeriesScrollPane;
    private static javax.swing.JLayeredPane adminLayeredPane;
    private static javax.swing.JLabel avContentLabel;
    private static javax.swing.JScrollPane avFilmScrollPane;
    private static javax.swing.JTable avFilmTable;
    private static javax.swing.JScrollPane avSeriesScrollPane;
    private static javax.swing.JTable avSeriesTable;
    private static javax.swing.JButton availableContBut;
    private static javax.swing.JButton chgRegisBut;
    private static javax.swing.JLabel custInfoLabel;
    private static javax.swing.JScrollPane custScrollPane;
    private static javax.swing.JTable custTable;
    private static javax.swing.JLayeredPane customerLayeredPane;
    private static javax.swing.JScrollPane deleteAdministratorScrollPane;
    private static javax.swing.JTable deleteAdministratorTable;
    private static javax.swing.JButton deleteCustomerBut;
    private static javax.swing.JScrollPane deleteCustomerScrollPane;
    private static javax.swing.JTable deleteCustomerTable;
    private static javax.swing.JButton deleteEmployeeBut;
    private static javax.swing.JScrollPane deleteEmployeeScrollPane;
    private static javax.swing.JTable deleteEmployeeTable;
    private static javax.swing.JButton dltAccBut;
    private static javax.swing.JLabel editProfileLabel;
    private static javax.swing.JLayeredPane employeeLayeredPane;
    private static javax.swing.JScrollPane filmRentScrollPane;
    private static javax.swing.JTable filmRents;
    private static javax.swing.JTable filmTable;
    private static javax.swing.JLabel incomeLabel;
    private static javax.swing.JScrollPane incomeScrollPane;
    private static javax.swing.JTable incomeTable;
    private static javax.swing.JButton incomesBut;
    private static javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    private static javax.swing.JButton makeAdministratorBut;
    private static javax.swing.JButton makeEmployeeBut;
    private static javax.swing.JButton movieRentBut;
    private static javax.swing.JButton myProfileBut;
    private static javax.swing.JButton myRentalsBut;
    private static javax.swing.JButton newAccBut;
    private static javax.swing.JLabel noAdmin;
    private static javax.swing.JLabel noContentLabel;
    private static javax.swing.JLabel noContentLabel2;
    private static javax.swing.JScrollPane profileScrollPane;
    private static javax.swing.JTable profileTable;
    private static javax.swing.JComboBox<String> registComboBox;
    private static javax.swing.JLabel registLabel;
    private static javax.swing.JScrollPane rentFilmScrollPane;
    private static javax.swing.JButton rentSeriesBut;
    private static javax.swing.JScrollPane rentSeriesScrollPane;
    private static javax.swing.JButton rentsBut;
    private static javax.swing.JLabel rentsLabel;
    private static javax.swing.JButton saveBut2;
    private static javax.swing.JButton saveButton;
    private static javax.swing.JButton seeCustBut;
    private static javax.swing.JScrollPane seriesIncomeScrollPane;
    private static javax.swing.JTable seriesIncomeTable;
    private static javax.swing.JTable seriesRent;
    private static javax.swing.JScrollPane seriesRentScrollPane;
    private static javax.swing.JTable seriesTable;
    private static javax.swing.JButton topBut;
    private static javax.swing.JScrollPane topFilmScrollPane;
    private static javax.swing.JTable topFilmsTable;
    private static javax.swing.JLabel topLabel;
    private static javax.swing.JScrollPane topSeriesScrollPane;
    private static javax.swing.JTable topSeriesTable;
    private static javax.swing.JScrollPane updateActorScrollPane;
    private static javax.swing.JTable updateActorTable;
    private static javax.swing.JButton updateActorsBut;
    private static javax.swing.JButton updateAdressBut;
    private static javax.swing.JButton updateAvailableBut;
    private static javax.swing.JButton updateCategoriesBut;
    private static javax.swing.JButton updateCityBut;
    private static javax.swing.JButton updateCountryBut;
    private static javax.swing.JButton updateDBBut;
    private static javax.swing.JScrollPane updateFilmInvScrollPane;
    private static javax.swing.JButton updateLanguagesBut;
    private static javax.swing.JButton updateMoviesBut;
    private static javax.swing.JButton updateSeriesBut;
    private static javax.swing.JTable updtAvFilmTable;
    private static javax.swing.JButton updtAvSeriesBut;
    private static javax.swing.JScrollPane updtAvSeriesScrollPane;
    private static javax.swing.JTable updtAvSeriesTable;
    private static javax.swing.JButton updtFilmInventory;
    private static javax.swing.JLabel yourRentalsLabel;
    // End of variables declaration                   
}
